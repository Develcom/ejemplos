package ve.gob.cne.sarc.persistencia.entidades;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import ve.gob.cne.sarc.persistencia.anotaciones.ClassEspecification;


/**
 * Sincronizador generated by hbm2java
 */
@Entity
@Table(name = "K005T_SINCRONIZADOR")
@ClassEspecification(name = "Sincronizador", identifier = "Nombre",
        generatesTask = ClassEspecification.SincronizationPolicy.NONE)
public class SincronizadorEntidad implements java.io.Serializable {

    /**
     *
     */
    private static final long serialVersionUID = 1L;

    private Long idSincronizador;
    private String nombre;
    private OficinaEntidad oficina;
    private SincronizadorEntidad pasarela;
    private List<SincronizadorEntidad> dependientes;
    private List<VersionBitacoraSincronizadorEntidad> versionBitacoraSyncs = new ArrayList<>(
            0);
    private List<VersionSincronizadorEstadoEntidad> versionSyncEstados = new ArrayList<>(
            0);
    private List<PaqueteSincronizacionEntidad> paquetes = new ArrayList<>(0);
    
    private String codigoSincronizacion;

    public SincronizadorEntidad() {
        // Contructor
    }

    /**
     * Constructor
     *
     * @param nombre
     * @param versionBitacoraSyncs
     * @param versionSyncEstados
     * @param paquetes
     */
    public SincronizadorEntidad(String nombre,
                                List<VersionBitacoraSincronizadorEntidad> versionBitacoraSyncs,
                                List<VersionSincronizadorEstadoEntidad> versionSyncEstados,
                                List<PaqueteSincronizacionEntidad> paquetes) {
        this.nombre = nombre;
        this.versionBitacoraSyncs = versionBitacoraSyncs;
        this.versionSyncEstados = versionSyncEstados;
        this.paquetes = paquetes;
    }

    @Id
    @Column(name = "ID_SINCRONIZADOR", unique = true, nullable = false)
    @SequenceGenerator(name = "SINCRONIZADOR_SEQ", sequenceName = "K005S_CO_SINCRONIZADOR", allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SINCRONIZADOR_SEQ")
    public Long getIdSincronizador() {
        return this.idSincronizador;
    }

    public void setIdSincronizador(Long idSincronizador) {
        this.idSincronizador = idSincronizador;
    }

    @Column(name = "NB_NOMBRE", length = 10)
    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "ID_OFICINA")
    public OficinaEntidad getOficina() {
        return oficina;
    }

    public void setOficina(OficinaEntidad oficina) {
        this.oficina = oficina;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "sincronizador")
    public List<VersionBitacoraSincronizadorEntidad> getVersionBitacoraSyncs() {
        return this.versionBitacoraSyncs;
    }

    public void setVersionBitacoraSyncs(
            List<VersionBitacoraSincronizadorEntidad> versionBitacoraSyncs) {
        this.versionBitacoraSyncs = versionBitacoraSyncs;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "sincronizador")
    public List<VersionSincronizadorEstadoEntidad> getVersionSyncEstados() {
        return this.versionSyncEstados;
    }

    public void setVersionSyncEstados(
            List<VersionSincronizadorEstadoEntidad> versionSyncEstados) {
        this.versionSyncEstados = versionSyncEstados;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "sincronizador")
    public List<PaqueteSincronizacionEntidad> getPaquetes() {
        return this.paquetes;
    }

    public void setPaquetes(List<PaqueteSincronizacionEntidad> paquetes) {
        this.paquetes = paquetes;
    }
    
    @ManyToOne(optional = true)
    @JoinColumn(name = "CO_PASARELA",
            referencedColumnName = "ID_SINCRONIZADOR", nullable = true)
    public SincronizadorEntidad getPasarela() {
		return pasarela;
	}

	public void setPasarela(SincronizadorEntidad pasarela) {
		this.pasarela = pasarela;
	}

	@Basic(optional = true)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pasarela",
            cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	public List<SincronizadorEntidad> getDependientes() {
		return dependientes;
	}

	public void setDependientes(List<SincronizadorEntidad> dependientes) {
		this.dependientes = dependientes;
	}

	@Basic(optional = false)
    @Column(name = "TX_CODIGO_SINCRONIZACION", nullable = false, length = 256)
    public String getCodigoSincronizacion() {
        return codigoSincronizacion;
    }

    public void setCodigoSincronizacion(String codigoSincronizacion) {
        this.codigoSincronizacion = codigoSincronizacion;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + (int) (idSincronizador ^ (idSincronizador >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        SincronizadorEntidad other = (SincronizadorEntidad) obj;
        if (idSincronizador != other.idSincronizador)
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Sincronizador [idSincronizador=" + idSincronizador
                + ", nombre=" + nombre + ", versionBitacoraSyncs="
                + versionBitacoraSyncs + ", versionSyncEstados="
                + versionSyncEstados + ", paquetes=" + paquetes + "]";
    }

}
